# config file for vmware agent
#
# Format:
#
# # comment
# [sectionname]
# key=value
# key
# !key
#
# Just specifying 'key' is the same as 'key=1'
# Similarly, '!key' is the same as 'key=0'
# false, 0, no : all mean the same
# true, 1, yes : all mean the same.  True is the default.
#
# Key and section names are case-insensitive and do not contain spaces

############################################################################
# global settings go in here
[global]
# how often to poll for data: recommneded 300
frequency=300
# poll for these things
datacenters=yes
clusters=yes
hosts=yes
guests=yes
# query timeout: recommend 60
timeout=60
# debug level for stdout: 0=none, 1=low, 2=detail, 3=trace
debug=1
daemon=yes
# PID file
pidfile=/var/run/vmware-agent.pid
# Perl libpaths, colon separated
includelib=/usr/local/rrdtool-1.4/lib/perl/5.10.1/x86_64-linux-thread-multi
# Location of tt2 files (defaults to $Bin/tt2, or $Bin/../tt2 )
tt2_lib=/usr/local/etc/tt2
# test (do not do updates)
test=false

############################################################################
[vmware]
# vmware API virtual centre hostname and credentials
# server can optionally have :port suffix if API is not on port 443
# You can specify multiple servers here if you wish space separated.
SERVER=virtualcentre.company.com
#SERVERS=server1.company.com server2.company.com backupserver.company.com
# Backup for if server is unavailable (if you have a failover virtualcentre)
# This doesnt seem to work reliably though
BACKUPSERVER=
# Credentials
USERNAME=DOMAIN\\xxxxxxxxxxxxx
PASSWORD=xxxxxxxxxxxx
# If no password specified, you MUST give a credential store
# If no username is specified, then the first user for this server
# in the credential store will be used (so make sure theres only one)
# Manage credential store using the VMware credstore_admin.pl utility
# XXX Not yet implemented
credential_store=/var/lib/vmware/credential_store

# Use guest name to identify guest hostname if cannot find out any other way?
# recommend false unless you have very accurate guest names
usename=false

############################################################################
# All other sections are output modules
[nagios]
enable=yes
# location of livestatus server
# used for name verification and status updates
livestatus=nagios.company.com:6557
# Used for copy status updates; E.G. in DR or redundant configurations
#duplivestatus=nagiosdr.company.com:6557
# nsca server - can use instead of livestatus or in addition.  Do not
# set nsca and livestatus to both point to the same Nagios host!
#nsca=nagios.company.com
# Local cmd pipe, if we do not have nsca or livestatus (NOT YET COMPLETED)
#cmd=/var/nagios/rw/nagios.cmd
# enable these to generate configuration files
cfg=true
# set to directory to hold configurations
# These should all be different, and separate from other Nagios config files
# Dont forget to include_dir these directories in your nagios.cfg
cfg_datacenter=/u02/nagios/etc/objects/vmware/dc
cfg_cluster=/u02/nagios/etc/objects/vmware/cluster
cfg_host=/u02/nagios/etc/objects/vmware/host
cfg_guest=/u02/nagios/etc/objects/vmware/guest
# PNP4Nagios in use? Set the action_url on the services
# Only set this if you have PNP4Nagios installed.
pnp_svc_action_url=/pnp4nagios/index.php/graph?host=$HOSTNAME$&srv=$SERVICEDESC$
pnp_host_action_url=/pnp4nagios/index.php/graph?host=$HOSTNAME$
# Object link URL
# This has the object name appended to make a hotlink to the Nagios page
# Donot set it if you do not want to.  Only tested with native and thruk
#link=/nagios/cgi-bin/status.cgi?host=
link=/thruk/cgi-bin/status.cgi?host=
linkpost=
# purge directory: recommend true unless subdir is shared
# with other config files
purge=true
# strip domain from fqdn to make nagios hostname
# do this if it is how you work
stripdomain=company.com
# canonicalise: recommend true
canonicalise=true
# lower case: recommend true
tolower=true
# Check time synch as well? Requires ESX hosts to have port 123/udp open
# true=agent does it, false=check_ntp does it, never=no ntp checks at all
ntp=false
# include host definition with guest services? 
# use false if you define the guest hosts to nagios elsewhere
# Use true if this is the main/only location to configure the guests
# If false, then the agent is not responsible for the host checks
guest_with_host=false
# verify the guest names already exist in nagios (via livestatus)
# use false if you have guest_with_host=true and are generating
# the guest config files (cfg=true and cfg_guest set)
# use true if you have set guest_with_host=false and cfg_guest is set
verify=true
# If guest verification fails, do we log a warning?  Usually false.
verify_warning=false
# Does the agent perform host checks? 
# if guest_with_host=false then guest host checks are never done by agent
# whatever this is set to.
agent_host_checks=true

# For Nagios alerting
# If set, this host/service receives alerts on the agent status.
# See config file in the nagios subdir for how to define this.
log_hostname=Nagios
log_servicedesc=VMware Agent
# Send warning alerts as well?
log_warn=true

# If you have VC service testing, add a service dependency
vcservice=VMWare VirtualCenter

# templates
tt2_datacenter=nagios/datacenter.tt2
tt2_cluster=nagios/cluster.tt2
tt2_host=nagios/host.tt2
tt2_guest=nagios/guest.tt2

# Default thresholds
# override in [guest], [host], [cluster] or [$fqdn]
# percent
thresh_rdy_warn=5
thresh_rdy_crit=20
thresh_cpu_warn=80
thresh_cpu_crit=90
thresh_mem_warn=80
thresh_mem_crit=90
# Percent of target SD
# use -1 to mean no crit threshold!
thresh_balance_warn=100
thresh_balance_crit=-1
# MB
thresh_dsk_warn=5120
thresh_dsk_crit=1024
# Seconds
thresh_ntp_warn=1
thresh_ntp_crit=5
# percent memory
thresh_swp_warn= 10
thresh_swp_crit=100
thresh_bal_warn=  5
thresh_bal_crit=100
# k/sec
thresh_swapin_warn= 1
thresh_swapin_crit= 5
# msec
thresh_latency_warn= 20
thresh_latency_crit= 50

############################################################################
[mrtg]
enable=yes
# location of rrdcached server
rrdcached=mrtg.company.com
# create rrd files? requires rrdcached 1.4.999 or later
# or local RRD files and not persistent connection
# Recommend yes if you have late enough rrdcached
create=yes
# where to create, if we do not have rrdcached 1.4.999 or later
# and have to use the RRDs module for creation instead
rrd_path=/usr/local/rrddata
# Heartbeat to use; default is 4x frequency = 4x300 = 1200
# do not make it too small, and never less than 2x frequency
# you can change this for xxx.rrd after creation to value hhh using 
# rrdtool tune xxx.rrd -h ds0:hhh -h ds1:hhh
heartbeat=1200
# Size of generated RRD files.  Default is 800 (same size
# as MRTG) but you may want to change it.
#rows=800
yearly_rows=1600
monthly_rows=8000
weekly_rows=9000
daily_rows=12000
# talk to rrdcached directly with persistent connections?
# This is much more efficient, and does not require the
# rrdtool perl libraries.
# Recommend yes as it is far faster.
persistent=yes
# enable this to create configuration files
cfg=true
# Make cfg files with thresholds? Give threshold dir
thresholds=/usr/local/rrddata/thresholds
# Base directory for CFG files.  This is used for Routers2 crosslinking.
# If you do not use Routers2, or do not set it, you get no crosslinks.
base_dir=/usr/local/mrtg/conf
# Create cfg files as included rather than standalone?
guest_included=true
host_included=false
datacenter_included=false
cluster_included=false
# Where to create the files
cfg_datacenter=/usr/local/mrtg/conf/vmware/dc
cfg_cluster=/usr/local/mrtg/conf/vmware/cluster
cfg_host=/usr/local/mrtg/conf/vmware/host
cfg_guest=/usr/local/mrtg/conf/vmware/guest
#cfg_guest=/tmp/vmware-guest
# purge directory
purge=true

# For routers2 support
# Set this to generate crosslinks between objects in Routers2
routers2_url=https://mrtg.company.com/cgi-bin/routers2.cgi

# add this to the start of cfg files (eg: cfgheader=Include:default.cfg)
# Use \n for newlines if necessary.
# Probably is easier to edit TT2 templates though
cfgheader=

# templates
tt2_datacenter=mrtg/datacenter.tt2
tt2_cluster=mrtg/cluster.tt2
tt2_host=mrtg/host.tt2
tt2_guest=mrtg/guest.tt2

############################################################################
[syslog]
# Log messages to syslog?
#enable=yes
enable=no
facility=local5

############################################################################
[logfile]
# Log messages to a log file?
enable=yes
file=/var/tmp/vmware-agent.log
# Truncate file on start if append=false
append=false
# log level to write to file: 0=errors, 1=warn, 2=info, 3=debug, 4=trace
level=1
# rotate every cycle?
# n=no, y=every cycle, d=daily
# File can get very big if level>1 and you do not rotate
rotate=y

############################################################################
[zenoss]
# send status updates and data to Zenoss API (NOT YET DONE)
# This should also hook into the verification test (as with livestatus/nagios)
# Probably this is not necessary as Zenoss Enterprise has built-in 
# VMware support?  Requires Zenoss Perl module to be installed.
enable=false
# Credentials for the API
username=vmwareagent
password=vmwareagent
# strip domain from fqdn to make Zenoss hostname
# do this if it is how you work
stripdomain=company.com
# canonicalise: recommend true
canonicalise=true
# lower case: recommend true
tolower=true
# verify the guest names already exist in zenoss 
verify=true
# If guest verification fails, do we log a warning?  Usually false.
verify_warning=false

############################################################################
[bigbrother]
# NOT YET DONE
enable=false

############################################################################
[gwos]
# NOT YET DONE
enable=false

############################################################################
[yourmonitoringsystem]
# Why not add a function for your monitoring system?
enable=false

############################################################################
# Monitoring options
[datacenters]
# Detailed stats?
network=false
datastores=false

# Include/exclude datastores and network interfaces
# Regular expressions
ds_include=
ds_exclude=-local
net_include=
net_exclude=
alarm_exclude=

# thresholds
thresh_<metric>_<warncrit>=<value>
thresh_<metric>_<object>_<warncrit>=<value>

############################################################################
[clusters]
# Detailed stats?
network=false
datastores=false

# Include/exclude datastores and network interfaces
ds_include=
ds_exclude=-swap|-local
net_include=
net_exclude=
alarm_exclude=

############################################################################
[hosts]
# Detailed stats?
network=false
datastores=false
memory=true

# Include/exclude disks and network interfaces
disk_include=
disk_exclude=
net_include=
net_exclude=
alarm_exclude=

############################################################################
[guests]
# Detailed stats?
network=true
datastores=true
disks=true
memory=true

alarm_exclude=

############################################################################
[myguest.nagios.hostname]
# per-guest thresholds: override [guests] thresholds which override [nagios]
thresh_latency_crit=250
# thresh_<metric>_<warncrit>=<value>

############################################################################
# Use this section to map guest name to FQDN and Nagios name
# if the agent is unable to correct deduce it.
# Use debug mode to get logs showing which guests are not being found
[map]
guestname=fqdn,nagiosname

[global]
# Include a separate file 
%INCLUDE vmware-thresholds.cfg


